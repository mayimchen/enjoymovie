package com.jingdong.app.mall.utils;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

import org.json.JSONObject;

import android.text.TextUtils;

public class HttpDownloader {

	private URL url = null;
	private final int CONNECTION_TIME_OUT = 15 * 1000;
	private  static String cookies ;
	public static String getCookies() {
		return cookies;
	}

	public static void setCookies(String cookies) {
		HttpDownloader.cookies = cookies;
	}

	private static boolean cookiesFlag;

	/**
	 * 根据URL下载文件,前提是这个文件当中的内容是文本,函数的返回值就是文本当中的内容 1.创建一个URL对象
	 * 2.通过URL对象,创建一个HttpURLConnection对象 3.得到InputStream 4.从InputStream当中读取数据
	 * 
	 * @param urlStr
	 * @return
	 */
	public int download(String urlStr, DownloadListener listener) {
		StringBuffer sb = new StringBuffer();
		String line = null;
		BufferedReader buffer = null;
		int returnCode = -1;
		try {
			url = new URL(urlStr);
			HttpURLConnection urlConn = (HttpURLConnection) url
					.openConnection();
			if(cookiesFlag){
				urlConn.setRequestProperty("Cookie", cookies);// Cookie 发出
			}
			buffer = new BufferedReader(new InputStreamReader(urlConn
					.getInputStream()));
			while ((line = buffer.readLine()) != null) {
				sb.append(line);
			}

		} catch (Exception e) {
			returnCode = -1;
		} finally {
			try {
				buffer.close();
				String responseStr = sb.toString();
				if (!TextUtils.isEmpty(responseStr)) {
					JSONObject jsonObj = new JSONObject(sb.toString());
					if("0".equals(jsonObj.getString("code"))){
							listener.onDownloadEnd(jsonObj);
						returnCode = 0;
					}
					
				} else {
					returnCode = -1;
				}

			} catch (Exception e) {
				returnCode = -1;
			}
		}
		return returnCode;
	}

	/**
	 * 
	 * @param urlStr
	 * @param path
	 * @param fileName
	 * @return -1:文件下载出错 0:文件下载成功
	 */
	public int downFile(String urlStr, String path, String fileName,
			DownloadListener lister) {
		InputStream inputStream = null;
		try {
			FileUtils fileUtils = new FileUtils();
			inputStream = getInputStreamFromURL(urlStr);
			if (inputStream == null) {
				return -1;
			}
			File resultFile = fileUtils.writeFromInput(path, fileName,
					inputStream);

			if (resultFile == null) {
				return -1;
			}
		} catch (Exception e) {
			e.printStackTrace();
			return -1;
		} finally {
			try {
				if (inputStream != null) {
					inputStream.close();
				}

			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		lister.onDownloadEnd(null);
		return 0;
	}

	/**
	 * 根据URL得到输入流
	 * 
	 * @param urlStr
	 * @return
	 */
	public InputStream getInputStreamFromURL(String urlStr) {
		HttpURLConnection urlConn = null;
		InputStream inputStream = null;
		try {
			url = new URL(urlStr);
			urlConn = (HttpURLConnection) url.openConnection();
			urlConn.setConnectTimeout(CONNECTION_TIME_OUT);
			urlConn.setReadTimeout(CONNECTION_TIME_OUT);
			inputStream = urlConn.getInputStream();

		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

		return inputStream;
	}

	public static void setCookiesFlag(boolean cookiesFlag) {
		HttpDownloader.cookiesFlag = cookiesFlag;
	}

	public static boolean isCookiesFlag() {
		return cookiesFlag;
	}

	public interface DownloadListener {
		public void onDownloadEnd(Object obj);
	}

}